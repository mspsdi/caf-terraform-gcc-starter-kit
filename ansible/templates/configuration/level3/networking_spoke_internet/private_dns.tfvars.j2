# Those that using HTTPS will cause SSL Cert Error if Host Name are different.
# e.g. Storage Account
# ERROR: SSL: no alternative certificate subject name matches target host name 'xxxxxxxxxxxx.privatelink.blob.core.windows.net'
private_dns = {
{% if internet_app_app_service | trim == '1' or internet_app_linux_function_app | trim == '1' or internet_app_logic_app | trim == '1' %}

  azurewebsites_dns_re1 = {
    name               = "privatelink.azurewebsites.net"
    resource_group_key = "networking_spoke_internet_re1"

    # vnet link is created after vnet is crated.
    vnet_links = {

      app_service_internet_vnet_link = {
        name               = "app-service-internet-vnet"
        registration_enabled = false # a virtual network can only link to one private dns zone with registration enabled
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }   

{% if management_vnet_name | trim != 'None' %}
      app_service_management_vnet_link = {
        name                 = "app-service-management-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}

      # app_service_devops_vnet_link = {
      #   name                 = "app-service-devops-vnet"
      #   registration_enabled = false
      #   virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{devops_vnet_name}}"
      # }                          
    }

    tags = { 
      purpose = "internet app service private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"            
    } 
  }
{% endif %}    
{% if internet_app_aks | trim == '1' %}

  acr_dns_re1 = {
    name               = "privatelink.azurecr.io" # must be this name 0 do not change
    resource_group_key = "networking_spoke_internet_re1"

    # vnet link is created after vnet is crated.
    
    vnet_links = {
      acr_internet_vnet_link = {
        name               = "acr-app-internet-vnet"
        registration_enabled = false # a virtual network can only link to one private dns zone with registration enabled
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }  

{% if management_vnet_name | trim != 'None' %}     
      acr_management_vnet_link = {
        name                 = "acr-management-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }      
{% endif %}    

    }
  
    tags = { 
      purpose = "acr private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"            
    }      
  }
{% endif %}
{% if internet_data_mssql | trim == '1' %}

  db_dns_re1 = {
    name               = "privatelink.database.windows.net" # must be this name 0 do not change
    resource_group_key = "networking_spoke_internet_re1"

    vnet_links = {
      db_internet_vnet_link = {
        name                 = "db-internet-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}           
      db_management_vnet_link = {
        name                 = "db-management-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}      
    }

    tags = { 
      purpose = "internet mssql private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"           
    } 
  }
{% endif %}
{% if internet_data_cosmosdb | trim == '1' %}

  cosmos_dns_re1 = {
    name               = "privatelink.documents.azure.com"
    resource_group_key = "networking_spoke_internet_re1"

    vnet_links = {
      cosmos_internet_vnet_link = {
        name = "cosmos-vnet-link"
        registration_enabled = false        
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}             
      cosmos_management_vnet_link = {
        name               = "cosmos-vent-link-mgmt"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }      
{% endif %}
    }

    tags = { 
      purpose = "internet cosmos private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"           
    } 
  }
{% endif %}
{% if management_recovery_services_vault | trim == '1' %}

  backup_dns_re1 = {
    name               = "privatelink.sea.backup.windowsazure.com"
    resource_group_key = "networking_spoke_internet_re1"
    
    vnet_links = {
      backup_internet_vnet_link = {
        name               = "backup-vent-link-project"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}         
      backup_management_vnet_link = {
        name               = "backup-vent-link-mgmt"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }
   
    tags = { 
      purpose = "management backup private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"            
    } 
  }
{% endif %}  
{% if management_ampls | trim == '1' %}  

  # begin ampls dns
  monitor_dns_re1  = {
    name               = "privatelink.monitor.azure.com"
    resource_group_key = "networking_spoke_internet_re1"
      
    vnet_links = {
      monitor_internet_vnet_link = {
        name               = "monitor-vent-link-project"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}         
      monitor_management_vnet_link = {
        name               = "monitor-vent-link-mgmt"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }

    tags = { 
      purpose = "management monitor private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"            
    }     
  }  

  oms_dns_re1 = {
    name               = "privatelink.oms.opinsights.azure.com"
    resource_group_key = "networking_spoke_internet_re1"
     
    vnet_links = {
      oms_internet_vnet_link = {
        name               = "oms-vent-link-project"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}    
      oms_management_vnet_link = {
        name               = "oms-vent-link-mgmt"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }
   
    tags = { 
      purpose = "management ampls oms private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"            
    }     
  }

  ods_dns_re1 = {
    name               = "privatelink.ods.opinsights.azure.com"
    resource_group_key = "networking_spoke_internet_re1"
     
    vnet_links = {
      ods_internet_vnet_link = {
        name               = "ods-vent-link-project"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}    
      ods_management_vnet_link = {
        name               = "ods-vent-link-mgmt"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }

    tags = { 
      purpose = "management ampls ods private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"            
    }     
  }

  agentsvc_dns_re1 = {
    name               = "privatelink.agentsvc.azure-automation.net"
    resource_group_key = "networking_spoke_internet_re1"
 
    vnet_links = {
      agentsvc_internet_vnet_link = {
        name               = "agentsvc-vent-link-project"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}          
      agentsvc_management_vnet_link = {
        name               = "agentsvc-vent-link-mgmt"
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }

    tags = { 
      purpose = "management ampls agentsvc private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"            
    }     
  }  
  # end ampls dns  
{% endif %}    
{% if internet_app_keyvault | trim == '1' %}

  # begin keyvault
  kv_dns_re1 = {
    name               = "vault.azure.net" # cannot use privatelink. as will have SSL error. must be this name 0 do not change
    resource_group_key = "networking_spoke_internet_re1"

    # vnet link is created after vnet is crated.
    vnet_links = {
      kv_internet_vnet_link = {
        name                 = "kv-app-internet-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }              
    }

    tags = { 
      purpose = "{{tag_zone_code}} keyvault private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"          
    }     
    
  }
  # end keyvault
{% endif %}  
{% if internet_app_openai | trim == '1' %}

  # begin openai
  openai_dns_re1 = {
    name               = "privatelink.openai.azure.com" # must be this name - do not change
    resource_group_key = "networking_spoke_internet_re1"

    vnet_links = {
      openai_internet_vnet_link = {
        name                 = "openai-internet-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}          
      openai_management_vnet_link = {
        name                 = "openai-management-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }

    tags = { 
      purpose = "{{tag_zone_code}} openai service private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"          
    } 

  }
  # end openai
{% endif %}  
{% if internet_app_search_service | trim == '1' %}

  # begin search service
  search_service_dns_re1 = {
    name               = "privatelink.search.windows.net" # must be this name - do not change
    resource_group_key = "networking_spoke_internet_re1"


    vnet_links = {
      search_service_internet_vnet_link = {
        name                 = "search-service-internet-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}              
      search_service_management_vnet_link = {
        name                 = "search-service-management-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }

    tags = { 
      purpose = "{{tag_zone_code}} search service private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"          
    } 

  }
  # end search service
{% endif %}  
{% if internet_data_storage_account | trim == '1' %}

  # begin blob storage
  blob_dns_re1 = {
    name               = "blob.core.windows.net" # cannot use privatelink. as will have SSL cert error.
    resource_group_key = "networking_spoke_internet_re1"

    vnet_links = {
      sa_internet_vnet_link = {
        name                 = "sa-internet-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}          
      sa_management_vnet_link = {
        name                 = "sa-management-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}      
    }

    tags = { 
      purpose = "{{tag_zone_code}} storage account private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"          
    } 

  }
  # end blob storage
{% endif %}  
{% if internet_data_redis_cache | trim == '1' %}

  # begin redis.cache
  redis_cache_dns_re1 = {
    name               = "privatelink.redis.cache.windows.net"
    resource_group_key = "networking_spoke_internet_re1"
    
    vnet_links = {
      redis_cache_internet_vnet_link = {
        name                 = "redis_cache-internet-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}        
      redis_cache_management_vnet_link = {
        name                 = "redis_cache-management-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }

    tags = { 
      purpose = "{{tag_zone_code}} redis cache private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"          
    } 

  }
  # end redis.cache
{% endif %}  
{% if internet_app_data_factory | trim == '1' %}

  # begin data factory
  data_factory_dns_re1 = {
    name               = "privatelink.datafactory.azure.net"
    resource_group_key = "networking_spoke_internet_re1"
    
    vnet_links = {
      data_factory_internet_vnet_link = {
        name                 = "data_factory-internet-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_spoke_internet_re1"              
{% endif %}
      }

{% if management_vnet_name | trim != 'None' %}        
      data_factory_management_vnet_link = {
        name                 = "data_factory-management-vnet"
        registration_enabled = false
{% if gcc_platform_import | trim == '0' %}
        virtual_network_id   = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{management_vnet_name}}"
{% else %}
        lz_key = "shared_services"
        vnet_key = "vnet_hub_management_re1"              
{% endif %}
      }
{% endif %}
    }

    tags = { 
      purpose = "{{tag_zone_code}} data factory private dns" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"          
    } 

  }
  # end redis.cache
{% endif %}  

}