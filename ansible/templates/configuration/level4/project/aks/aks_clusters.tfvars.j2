
# TODO: 
# 1. enable container insight
# 2 Note: Important *** - to deploy internal load balancer
# Must grant permission "reader and network contributor" OR "contributor" to "xxxxx-msi-aks-usermsi" (user assigned) and "aks-cluster-re1" (system assigned) to 
# 1, not required - ignite_rg_aks_re1 resoruce group 
# 2. ignite-snet-app-internet vnet resource
# ERROR encounter
# does not have authorization to perform when deploy a container to AKS, unable to create the internal LB
#  action 'Microsoft.Network/virtualNetworks/subnets/read' over scope
#  '/subscriptions/xxxxxxxx-4066-42f0-b0fa-xxxxxxxxxxxx/resourceGroups/gcci-platform/providers/Microsoft.Network/virtualNetworks/gcci-vnet-internet/subnets/{{project_code}}-snet-app-internet'

aks_clusters = {
  cluster_re1 = {
    name               = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}privatecluster" # "cluster-re1" 
    resource_group_key = "aks_re1"
    os_type            = "Linux"

    # latest version 29th Dec 2023 - "1.27.7"  1.27.3, default 1.26.6   
    kubernetes_version = "1.27.7" # "1.26.6" 
    dns_prefix              = "private-aks"

    # ** IMPORTANT ** a user assigned identity or a service principal must be used when using a custom private dns zone
    identity = {
      type                 = "UserAssigned"
      managed_identity_key = "aks_usermsi"
    }    

    # networking configuration - azure cni overlay - recommended network plugin configuration to reduce the no of ip addresses in the subnet
    # In Overlay networking, only the Kubernetes cluster nodes are assigned IPs from a subnet. Pods receive IPs from a private CIDR provided at the time of cluster creation.
    # network_plugin - (Required) Network plugin to use for networking. Currently supported values are azure, kubenet and none. Changing this forces a new resource to be created.
    network_profile = {
      network_plugin     = "azure"
      # When network_plugin_mode is set to overlay, the network_plugin field can only be set to azure. When upgrading from Azure CNI without overlay, pod_subnet_id must be specified.
      network_plugin_mode = "overlay" 

      network_policy     = "azure"
      service_cidr       = "8.0.0.0/16" # to change 10 to 8 or 11
      dns_service_ip     = "8.0.0.10" # to change 10 to 8 or 11
      # azure cni overlay
      pod_cidr           = "8.244.0.0/16" # to change 10 to 8 or 11 
      # docker_bridge_cidr` has been deprecated as the API no longer supports it and will be removed in version 4.0 of the provider.
      # docker_bridge_cidr = "10.244.0.0/16" # to change 10 to 8 or 11 - why this value is not taking effect.

      # expected network_profile.0.load_balancer_sku to be one of [basic standard], got Standard
      load_balancer_sku = "standard" # "Standard"      
    }

    # userDefinedRouting outbound type, which ensures that any outbound traffic is forced through the firewall and no other egress paths will exist. 
    outbound_type           = "userDefinedRouting" 

    private_cluster_enabled = true
    enable_rbac             = true
    oidc_issuer_enabled =  true 
    workload_identity_enabled = true

    private_cluster_public_fqdn_enabled = true
    load_balancer_profile = {
      # Only one option can be set
      managed_outbound_ip_count = 1
    }

    private_endpoints = {
      pe1 = {
        name = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}aks-pe"
{% if gcc_platform_import | trim == '0' %}
        subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}/subnets/{{prefix}}-snet-app-internet"
{% else %}
        lz_key = "networking_spoke_internet"
        virtual_subnet_key = "app_internet_subnet"
{% endif %} 

        private_service_connection = {
          name                 = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}aks-psc"
          is_manual_connection = false
          subresource_names    = ["management"]
        }

        private_dns = {
          zone_group_name = "default" # "aks_re1" # TODO: is this the resource group name?        
          lz_key          = "networking_spoke_internet" # if DNS keys is deployed in remote landingzone
          keys = ["aks_dns_re1"]            
        }
        
      }
    }  

    # # ERROR: Message="Service principal or user-assigned identity must be given permission to read and write to custom private dns zone /subscriptions/xxxxxxxx-4066-42f0-b0fa-xxxxxxxxxxxx/resourceGroups/osscuat-rg-networking-spoke-internet-re1-ojx/providers/Microsoft.Network/privateDnsZones/privatelink.southeastasia.azmk8s.io. Check access result not allowed for action Microsoft.Network/privateDnsZones/read."
    # # aks_user has no right to access private dns zone
    # # use azure cli to create this private dns zone for aks
   
    # To make the registration of the A record in the Private DNS Zone work, in addition to linking the Private DNS Zone to the virtual network, the managed identity needs the following roles (at least):
    # Private DNS Zone Contributor role on the Private DNS Zone
    # Network Contributor role on the virtual network used by AKS

    # identity = {
    #   type = "SystemAssigned"
    # }

{% if gcc_platform_import | trim == '0' %}
    subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}/subnets/{{prefix}}-snet-app-internet"
{% else %}
    lz_key = "networking_spoke_internet"
    virtual_subnet_key = "app_internet_subnet"
{% endif %} 

    # TODO: Azure AAD RBAC will required kubelogin for authentication
    # role_based_access_control = {
    #   enabled = true
    #   azure_active_directory = {
    #     managed = true
    #   }
    # }


    # role_based_access_control = {
    #   enabled = true
    #   azure_active_directory = {
    #     managed = true
    #     # admin_group_object_ids = ["7304e4e7-b148-4ada-a135-6049c702d21e"]
    #     admin_groups = {
    #       keys = ["aks_cluster_re1_admins"]
    #     }
    #   }
    # }

    default_node_pool = {
      name    = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}sharedsvc" # max length of 12, and only have characters a-z0-9
      vm_size = "Standard_D8ls_v5"  # "Standard_DS2_v2" # "Standard_F4s_v2" # "Standard_DS2_v2"
{% if gcc_platform_import | trim == '0' %}
      subnet = {
        resource_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}/subnets/{{prefix}}-snet-app-internet"
      }
{% else %}
      lz_key = "networking_spoke_internet"
      virtual_subnet_key = "app_internet_subnet"
{% endif %} 
{% if caf_environment | trim == 'prd' %}
      availability_zones           = ["1","2","3"] # set to 3 AZs for production
{% endif %} 
      enabled_auto_scaling         = true
      enable_node_public_ip        = false
      max_pods                     = 30
      node_count                   = 1 # set to >= 2 in production
      os_disk_size_gb              = 256
      # when using ingress_application_gateway you need an additional node_pool as agic is a non-critical addon
      only_critical_addons_enabled = false     
      # latest version 29 Dec 2023 - 1.27.7 4th Aug 2023 - 1.27.3, default 1.26.6                
      orchestrator_version         = "1.27.7" # "1.26.6" 
      tags = { 
        purpose = "{{project_code}} default node pool" 
        # project_code = "{{project_code}}" 
        env = "uat" 
        zone = "internet"
        tier = "app"     
      } 
    }

    # aks will create a new resource group to deploy vmss
    node_resource_group_name = "aks-nodes-re1" # resource group "name" string, NOT the "key" where the nodes resources deployed to 
    
    node_pools = {
      pool1 = {
        name                = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}npuser01"
        mode                = "User"
{% if gcc_platform_import | trim == '0' %}
        subnet = {
          resource_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}/subnets/{{prefix}}-snet-app-internet"
        }   
{% else %}
        lz_key = "networking_spoke_internet"
        virtual_subnet_key = "app_internet_subnet"
{% endif %} 
{% if caf_environment | trim == 'prd' %}
        availability_zones           = ["1","2","3"] # set to 3 AZs for production
{% endif %} 
        max_pods            = 15 # 30
        vm_size               = "Standard_D8ls_v5"  # "Standard_DS2_v2" # "Standard_F4s_v2"
        node_count          = 2
        max_pods                     = 30     
        enable_node_public_ip        = false           
        enabled_auto_scaling         = true
        os_disk_size_gb     = 512
        identity = {
          type                 = "UserAssigned"
          managed_identity_key = "aks_usermsi"
        }        
        tags = { 
          purpose = "{{project_code}} user node pool" 
          # project_code = "{{project_code}}" 
          env = "uat" 
          zone = "internet"
          tier = "app"       
        } 
      }    
    }


    addon_profile = {
      oms_agent = {
        enabled = true
{% if gcc_platform_import | trim == '0' %}
        log_analytics_workspace_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{log_analytics_workspace_resource_group_name}}/providers/Microsoft.OperationalInsights/workspaces/{{log_analytics_workspace_name}}",
{% else %}
        # lz_key = "shared_services"
        log_analytics_key = "central_logs_region1" # TODO: check if lz_key is required
{% endif %} 
      }
      azure_policy = {
        enabled = true
      }

      # additional addons
      azure_keyvault_secrets_provider = {
        secret_rotation_enabled  = true
        secret_rotation_interval = "2m"
      }

      storage_profile = {
        blob_driver_enabled = true
      }    

      # TODO: 
      # No AGIC - AGIC as an AKS add-on
      # ingress_application_gateway = {
      #   enabled = true
      #   key     = "agw" 
      # }
    }

    tags = { 
      purpose = "internet aks cluster" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"        
    } 

    diagnostic_profiles = {
      central_logs_region = {
        definition_key   = "azure_kubernetes_cluster"
        destination_type = "log_analytics"
        destination_key  = "central_logs"
      }
    }
  }
}