cosmos_dbs = {
  cosmosdb_account_re1 = {
    name                      = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}cosmosdb_acc"
    resource_group_key        = "cosmodb_rg_re1"
    offer_type                = "Standard"
    kind                      = "GlobalDocumentDB"
    enable_automatic_failover = "true"

    consistency_policy = {
      consistency_level       = "BoundedStaleness"
      max_interval_in_seconds = "300"
      max_staleness_prefix    = "100000"
    }
    # Primary location (Write Region)
    geo_locations = {
      primary_geo_location = {
        prefix            = "customid-101"
        region            = "region1"
        zone_redundant    = false
        failover_priority = 0
      }
      # failover location
      #failover_geo_location = {
      #  location          = "francecentral"
      #  failover_priority = 1
      #}
    }

    # ** IMPORTANT ** a user assigned identity or a service principal must be used when using a custom private dns zone
    identity = {
      type                 = "UserAssigned"
      lz_key          = "shared_services" # if DNS keys is deployed in remote landingzone    
      managed_identity_keys = ["aks_usermsi","cosmos_usermsi"] # TODO: why aks_usermsi???
    } 

    # Optional - private endpoint
    private_endpoints = {
      # Require enforce_private_link_endpoint_network_policies set to true on the subnet
      cosmos_db_pe1 = {
        name               = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}cosmos-private-endpoint"
        resource_group_key = "cosmodb_rg_re1"

{% if gcc_platform_import | trim == '0' %}
        subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}/subnets/{{prefix}}-snet-db-internet"
{% else %}
        lz_key = "networking_spoke_internet"
        virtual_subnet_key = "db_internet_subnet"
{% endif %} 

        private_service_connection = {
          name                 = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}cosmos-private-link"
          is_manual_connection = false
          subresource_names    = ["Sql"]
        }

        private_dns = {
          zone_group_name = "default"
          lz_key          = "networking_spoke_internet" # if DNS keys is deployed in remote landingzone
          keys = ["cosmos_dns_re1"]
        }
      }
    }    

    # Optional
    enable_free_tier = false
    #ip_range_filter  = "116.88.85.63,116.88.85.64"
    #capabilities              = ["EnableTable"]
    enable_multiple_write_locations = false
    tags = { 
      purpose = "{{tag_zone_code}} mssql server" 
      project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"         
    } 
    # # you can setup up to 5 key
    diagnostic_profiles = {
      central_logs_region1 = {
        definition_key   = "cosmosdb"
        destination_type = "log_analytics"
        destination_key  = "central_logs"
        # lz_key = "shared_services" # TODO: is this required?
      }
    }      

    # [optional] - Other DB API supoorted - MongoDB, Table, Gramlin GraphDB
    sql_databases = {
      databases_re1 = {
        # when set to 'true' it will append random generated integer to sql database
        # defaults to 'true'
        # add_rnd_num = true
        name       = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}cosmos-sql-exdb"
        throughput = 400
        #autoscale_settings = {
        #      max_throughput = 4000
        #}

        containers = {
          container1 = {
            name               = "{{env_code}}{{dash_1}}{{zone_code}}{{dash_2}}{{tier_code}}{{dash_last}}container-ex101"
            throughput = 400
            partition_key_path = "/partitionKeyPath"

            unique_key = {
              paths = ["/uniquePath1", "/uniquePath2"]
            }

            #autoscale_settings = {
            #  max_throughput = 4000
            #}

            indexing_policy = {
              included_paths = {
                path1 = "/*"
              }

              excluded_paths = {
                path1 = "/excludedPath/?"
              }

              spatial_indexes = {
                path1 = "/spatialIndexPath1/?"
                path2 = "/spatialIndexPath2/?"
              }

              composite_indexes = {
                composite_index1 = {
                  index1 = {
                    path  = "/indexPath1"
                    order = "Descending"
                  }
                  index2 = {
                    path  = "/indexPath2"
                    order = "Descending"
                  }
                }

                composite_index2 = {
                  index1 = {
                    path  = "/indexPath1"
                    order = "Ascending"
                  }
                  index2 = {
                    path  = "/indexPath2"
                    order = "Ascending"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

