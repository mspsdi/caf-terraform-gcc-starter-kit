# managed identity to attach to vm to download from the storage account
managed_identities = {
  user_mi = {
    name               = "user_mi-ingress-intranet"
    resource_group_key = "vm_region1"
  }
}

storage_accounts = {
  sa1 = {
    name               = "sa2"
    resource_group_key = "vm_region1"
    # Account types are BlobStorage, BlockBlobStorage, FileStorage, Storage and StorageV2. Defaults to StorageV2
    #account_kind = "BlobStorage"
    # Account Tier options are Standard and Premium. For BlockBlobStorage and FileStorage accounts only Premium is valid.
    account_tier = "Standard"
    #  Valid options are LRS, GRS, RAGRS, ZRS, GZRS and RAGZRS
    account_replication_type = "LRS" # https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy
    containers = {
      files = {
        name = "files"
      }
    }
  }
}

# Upload helloworld scripts
storage_account_blobs = {
  script1 = {
    name                   = "helloworld.sh"
    storage_account_key    = "sa1"
    storage_container_name = "files"
    source                 = "/tf/caf/{{gcc_starter_project_folder}}/landingzone/configuration/level4/project/vm_windows/scripts/helloworld.sh"
    parallelism            = 1
  }
  script2 = {
    name                   = "helloworld.ps1"
    storage_account_key    = "sa1"
    storage_container_name = "files"
    source                 = "/tf/caf/{{gcc_starter_project_folder}}/landingzone/configuration/level4/project/vm_windows/scripts/helloworld.ps1"
    parallelism            = 1
  }
}

# give managed identity Storage Blob Data reader and executing user Storage Blob Data Contributor permissions on storage account
role_mapping = {
  built_in_role_mapping = {
    storage_accounts = {
      sa1 = {
        "Storage Blob Data Reader" = {
          managed_identities = {
            keys = ["user_mi"]
          }
        }
        "Storage Blob Data Contributor" = {
          logged_in = {
            keys = ["user"]
          }
        }
      }
    }
  }
}

# Virtual machines
virtual_machines = {

  # Configuration to deploy a bastion host windows virtual machine
  win_vm1 = {
    resource_group_key = "vm_region1"
    provision_vm_agent = true
    # when boot_diagnostics_storage_account_key is empty string "", boot diagnostics will be put on azure managed storage
    # when boot_diagnostics_storage_account_key is a non-empty string, it needs to point to the key of a user managed storage defined in diagnostic_storage_accounts
    # if boot_diagnostics_storage_account_key is not defined, but global_settings.resource_defaults.virtual_machines.use_azmanaged_storage_for_boot_diagnostics is true, boot diagnostics will be put on azure managed storage

    os_type = "windows"

    # the auto-generated ssh key in keyvault secret. Secret name being {VM name}-ssh-public and {VM name}-ssh-private
    keyvault_key = "example_vm_rg1"

    # Define the number of networking cards to attach the virtual machine
    networking_interfaces = {
      nic0 = {

{% if gcc_platform_import | trim == '0' %}
        resource_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{internet_vnet_name}}/subnets/{{prefix}}-snet-app-internet"
{% else %}
        # vm is using "subnet_key" for virtual subnet key
        lz_key = "networking_spoke_internet"
        subnet_key = "app_internet_subnet"   
{% endif %} 

        name                    = "2"
        enable_ip_forwarding    = false
        internal_dns_name_label = "nic0"
        # public_ip_address_key   = "example_vm_pip1_rg1"
      }
    }

    virtual_machine_extensions = {
      custom_script = {
        #fileuris            = ["https://somelocation/container/script.ps1"]
        # can define fileuris directly or use fileuri_sa_ reference keys and lz_key:
        fileuri_sa_key   = "sa1"
        fileuri_sa_path  = "files/helloworld.ps1"
        commandtoexecute = "PowerShell -file helloworld.ps1"
        # managed_identity_id = optional to define managed identity principal_id directly
        identity_type        = "UserAssigned" #optional to use managed_identity for download from location specified in fileuri, UserAssigned or SystemAssigned.
        managed_identity_key = "user_mi"
        #lz_key               = "other_lz" optional for managed identity defined in other lz
      }
    }
    virtual_machine_settings = {
      windows = {
        name = "w1"
        size = "Standard_F2"

        admin_username = "adminuser"
        # Spot VM to save money
        #priority        = "Spot"
        #eviction_policy = "Deallocate"

        # Value of the nic keys to attach the VM. The first one in the list is the default nic
        network_interface_keys = ["nic0"]

        os_disk = {
          name                 = "windows_vm1-os"
          caching              = "ReadWrite"
          storage_account_type = "Standard_LRS"
          managed_disk_type    = "StandardSSD_LRS"
          disk_size_gb         = "128"
          create_option        = "FromImage"
        }

{% if custom_image_id | trim == 'None' or custom_image_id | trim == '' %}
        source_image_reference = {
          publisher = "MicrosoftWindowsServer"
          offer     = "WindowsServer"
          sku       = "2019-Datacenter"
          version   = "latest"
        }
{% else %}
        custom_image_id = "/subscriptions/{{subscription_id}}/resourceGroups/rg-prd-standardbuild/providers/Microsoft.Compute/galleries/standardbuild/images/GT-GCCS-StandardBuild-Windows-Server-2022-on-2023-08-21"
{% endif %}  

        identity = {
          type                  = "UserAssigned"
          managed_identity_keys = ["user_mi"]
        }
      }
    }
  }

}

keyvaults = {
  example_vm_rg1 = {
    name               = "vmsecretskvwindows-ingress-intranet"
    resource_group_key = "vm_region1"
    sku_name           = "standard"
    soft_delete_enabled         = false    # set to true for production
    purge_protection_enabled    = false    # set to true for production    

    tags = { 
      purpose = "{{tag_zone_code}} vm windows tooling server key vault" 
      # project_code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{tag_zone_code}}"
      tier = "{{tag_tier_code}}"          
    }    

    creation_policies = {
      logged_in_user = {
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
    }
  }
}


public_ip_addresses = {
  example_vm_pip1_rg1 = {
    name               = "example_vm_pip1_rg1-ingress-intranet"
    resource_group_key = "vm_region1"
    sku                = "Basic"
    # Note: For UltraPerformance ExpressRoute Virtual Network gateway, the associated Public IP needs to be sku "Basic" not "Standard"
    allocation_method = "Dynamic"
    # allocation method needs to be Dynamic
    ip_version              = "IPv4"
    idle_timeout_in_minutes = "4"
  }
}